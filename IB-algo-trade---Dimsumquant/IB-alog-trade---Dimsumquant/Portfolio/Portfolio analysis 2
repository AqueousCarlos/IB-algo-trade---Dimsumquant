# -*- coding: utf-8 -*-
"""
Created on Sat May 5 09:39:47 2018

@author: Aqueous Carlos
"""

import numpy as np
import pandas as pd
from pandas_datareader import data as pdr
import matplotlib.pyplot as plt
import datetime
import scipy.optimize as optimization
import fix_yahoo_finance as yf 
from scipy.stats import norm
import math

yf.pdr_override() 
#these are the stocks we can choose in our portfolio
stocks = [
'TQQQ',
'SPXS',
'TZA',
'TMF',
'TMV',
'UGLD',
'UPRO'
]

'''
'GOOG',
'AMZN',
'NTES',
'JPM',
'PG',
'MCD']
'''

startD = '2008-01-01'
endD = '2018-03-09'

start_date = pd.to_datetime(startD) 
end_date = pd.to_datetime(endD)
data = pdr.get_data_yahoo(stocks, start=start_date, end=end_date)['Adj Close']
    
#downloading the data from Yahoo! Finance
def download_data(stocks):
	data = pdr.get_data_yahoo(stocks, start=start_date, end=end_date)['Adj Close']	
	return data
	
def show_data(data):
	data.plot(figsize=(10,5))
	plt.show()

#we usually use natural logarithm for normalization purposes
def calculate_returns(data):
	returns = np.log(data/data.shift(1))
	return returns;
	
def plot_daily_returns(returns):
	returns.plot(figsize=(10,5))
	plt.show()

#print out mean and covariance of stocks within [start_date, end_date]. There are 252 trading days within a year
def show_statistics(returns):
	print(returns.mean()*252)
	print(returns.cov()*252)

#weights defines what stocks to include (with what portion) in the portfolio
def initialize_weights():
	weights = np.random.random(len(stocks))
	weights /= np.sum(weights)
	return weights;
	
#expected portfolio return
def calculate_portfolio_return(returns, weights):
	portfolio_return = np.sum(returns.mean()*weights)*252
	print("Expected portfolio return:", portfolio_return)

#expected portfolio variance
def calculate_portfolio_variance(returns, weights):
	portfolio_variance = np.sqrt(np.dot(weights.T, np.dot(returns.cov()*252,weights)))
	print("Expected variance:", portfolio_variance)

def generate_portfolios(weights, returns):

	preturns = []
	pvariances = []

	#Monte-Carlo simulation: we generate several random weights -> so random portfolios !!!
	for i in range(10000):
		weights = np.random.random(len(stocks))
		weights/=np.sum(weights)
		preturns.append(np.sum(returns.mean()*weights)*252)
		pvariances.append(np.sqrt(np.dot(weights.T,np.dot(returns.cov()*252,weights))))
	
	preturns = np.array(preturns)
	pvariances = np.array(pvariances)
	return preturns,pvariances

def plot_portfolios(returns, variances):
	plt.figure(figsize=(10,6))
	plt.scatter(variances,returns,c=returns/variances,marker='o')
	plt.grid(True)
	plt.xlabel('Expected Volatility')
	plt.ylabel('Expected Return')
	plt.colorbar(label='Sharpe Ratio')
	plt.show()

# OK this is the result of the simulation ... we have to find the optimal portfolio with 
# some optimization technique !!! scipy can optimize functions (minimum/maximum finding)
def statistics(weights, returns):
	portfolio_return=np.sum(returns.mean()*weights)*252
	portfolio_volatility=np.sqrt(np.dot(weights.T,np.dot(returns.cov()*252,weights)))
	return np.array([portfolio_return,portfolio_volatility,portfolio_return/portfolio_volatility])

# [2] means that we want to maximize according to the Sharpe-ration
# note: maximizing f(x) function is the same as minimizing -f(x) !!!
def	min_func_sharpe(weights,returns):
	return	-statistics(weights,returns)[2] 
	
# what are the constraints? The sum of weights = 1 !!!  f(x)=0 this is the function to minimize
def optimize_portfolio(weights,returns):
	constraints = ({'type':'eq','fun': lambda x: np.sum(x)-1}) #the sum of weights is 1
	bounds = tuple((0,1) for x in range(len(stocks))) #the weights can be 1 at most: 1 when 100% of money is invested into a single stock
	optimum=optimization.minimize(fun=min_func_sharpe,x0=weights,args=returns,method='SLSQP',bounds=bounds,constraints=constraints) 
	return optimum
	
# optimal portfolio according to weights: 0 means no shares of that given company 
def print_optimal_portfolio(optimum, returns):
	print("Optimal weights:", optimum['x'].round(3))
	print("Expected return, volatility and Sharpe ratio:", statistics(optimum['x'].round(3),returns))

def show_optimal_portfolio(optimum, returns, preturns, pvariances):
	plt.figure(figsize=(10,6))
	plt.scatter(pvariances,preturns,c=preturns/pvariances,marker='o')
	plt.grid(True)
	plt.xlabel('Expected Volatility')
	plt.ylabel('Expected Return')
	plt.colorbar(label='Sharpe Ratio')
	plt.plot(statistics(optimum['x'],returns)[1],statistics(optimum['x'],returns)[0],'g*',markersize=20.0)
	plt.show()

risk_free_rate = 0.05

def capm(start_date, end_date, ticker1, ticker2):

	#get the data from Yahoo Finance
	stock1 = pdr.get_data_yahoo(ticker1, start_date, end_date)
	stock2 = pdr.get_data_yahoo(ticker2, start_date, end_date)
    
	#we prefer monthly returns instead of daily returns
	return_stock1 = stock1.resample('M').last()
	return_stock2 = stock2.resample('M').last()

	#creating a dataFrame from the data - Adjusted Closing Price is used as usual
	data = pd.DataFrame({'s_adjclose' : return_stock1['Adj Close'], 'm_adjclose' : return_stock2['Adj Close']}, index=return_stock1.index)
	#natural logarithm of the returns
	data[['s_returns', 'm_returns']] = np.log(data[['s_adjclose','m_adjclose']]/data[['s_adjclose','m_adjclose']].shift(1))
	#no need for NaN/missing values values so let's get rid of them
	data = data.dropna()

	#covariance matrix: the diagonal items are the vairances - off diagonals are the covariances
	#the matrix is symmetric: cov[0,1] = cov[1,0] !!!
	covmat = np.cov(data["s_returns"], data["m_returns"])
	print(covmat)
	
	#calculating beta according to the formula
	beta = covmat[0,1]/covmat[1,1]
	print("Beta from formula:", beta)

	#using linear regression to fit a line to the data [stock_returns, market_returns] - slope is the beta
	beta,alpha = np.polyfit(data["m_returns"], data['s_returns'], deg=1)
	print("Beta from regression:", beta)
	
	#plot
	fig,axis = plt.subplots(1,figsize=(20,10))
	axis.scatter(data["m_returns"], data['s_returns'], label="Data points")
	axis.plot(data["m_returns"], beta*data["m_returns"] + alpha, color='red', label="CAPM Line")
	plt.title('Capital Asset Pricing Model, finding alphas and betas')
	plt.xlabel('Market return $R_m$', fontsize=18)
	plt.ylabel('Stock return $R_a$')
	plt.text(0.08, 0.05, r'$R_a = \beta * R_m + \alpha$', fontsize=18)
	plt.legend()
	plt.grid(True)
	plt.show()
	
	#calculate the expected return according to the CAPM formula
	expected_return = risk_free_rate + beta*(data["m_returns"].mean()*12-risk_free_rate)
	print("Expected return:", expected_return)
	
if __name__ == "__main__":
	data = download_data(stocks)
	show_data(data)
	returns = calculate_returns(data)
	plot_daily_returns(returns)
	show_statistics(returns)
	weights=initialize_weights()
	calculate_portfolio_return(returns,weights)
	calculate_portfolio_variance(returns,weights)
	preturns,pvariances=generate_portfolios(weights, returns)
	plot_portfolios(preturns,pvariances)
	optimum=optimize_portfolio(weights,returns)
	print_optimal_portfolio(optimum, returns)
	show_optimal_portfolio(optimum, returns, preturns, pvariances)

#CAPM model
if __name__ == "__main__":
    for x in stocks:
        capm(startD, endD, x , '^GSPC')

#VaR (Value at Risk) with Mont-Carlo simulation    
class ValueAtRiskMonteCarlo:
    
	def __init__(self, S, mu, sigma, c, n, iterations):
		self.S = S
		self.mu = mu
		self.sigma = sigma
		self.c = c
		self.n = n
		self.iterations = iterations 
	
	def simulation(self):
		stock_data = np.zeros([self.iterations, 1])	
		rand = np.random.normal(0, 1, [1, self.iterations])
		
		#equation for the S(t) stock price
		stock_price = self.S*np.exp(self.n*(self.mu - 0.5*self.sigma**2)+self.sigma*np.sqrt(self.n)*rand)
		
		#we have to sort the stock prices to determine the percentile
		stock_price = np.sort(stock_price)
 
		#it depends on the confidence level: 95% -> 5 and 99% -> 1
		percentile = np.percentile(stock_price,(1-self.c)*100)
		
		return self.S-percentile
    
if __name__ == "__main__":
    S = 100 		    #this is the investment (stocks or whatever)
    c=0.99		    #condifence level: this time it is 99%
    n = 14			    #1 day 
    iterations = 100000 #number of paths in the Monte-Carlo simulation
    #download stock related data from Yahoo Finance
    for x in stocks:
        data_1 = pdr.get_data_yahoo(x, start=start_date, end=end_date)
        #we can use pct_change() to calculate daily returns
        data_1['returns'] = data_1['Adj Close'].pct_change()
        #we can assume daily returns to be normally sidtributed: mean and variance (standard deviation)
        #can describe the process
        mu = np.mean(data_1['returns'])
        sigma = np.std(data_1['returns'])
        model = ValueAtRiskMonteCarlo(S,mu,sigma,c,n,iterations)
        print('Value at risk with Monte-Carlo simulation as per 100 dollar: $%0.2f' % model.simulation())

